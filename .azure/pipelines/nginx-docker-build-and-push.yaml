# This template common steps for building and pushing of dev-carbon images
# Note that this also makes sure we comply with the SBOM requirements even
# though we likely will never use these images beyond the dev/build environment

variables:
  # The base name of the image
  # This also matches the suffix of the Dockerfile - ex Dockerfile.ubuntu
  baseName: 'ubuntu'
  # The version of the the base-named image
  baseVer: '20.04'
  # The path of the image (should normally not change)
  repositorydocker: nginx-recording-test-proxy
  dockerfile: 'tests/recordproxy/Dockerfile.base'
  version: $(Build.BuildId)

trigger:
  branches:
    include:
      - main
      - refs/tags/*
pr:
  - main

pool:
  name: $(UbuntuPipelineName)

stages:
- stage: SetupStage
  jobs:
  - job: SetupJob
    steps:
    - task: Bash@3
      name: Variables
      inputs:
        filePath: ./.azure/pipelines/scripts/set-variables.sh
        arguments: '0.0.0-dev2024.$(Build.BuildId)'
      displayName: 'Set up environment variables'
  
- stage: DockerStage
  dependsOn: SetupStage
  jobs:
  - job: DockerJob

    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        containerRegistry: 'acrbn-acr'
        command: 'login'
    - task: Docker@2  
      displayName: Build ($(dockerfile) - $(version))  
      inputs:  
        command: 'build'  
        containerRegistry: 'acrbn-acr'  
        repository: $(repositorydocker)  
        Dockerfile: $(dockerfile)  
        buildContext: '.'  
        
    ################################################################################
    ## SBOM

    # So, I have come up with a way to build the SBOM and add it to the image that
    # we just built above.  It assumes a single tag, but that is just fine as
    # we want just a single tag here.
    # For the SBOM tool, we need to have a directory to which it writes to
    - task: Bash@3
      displayName: 'Make directory for SBOM'
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p "$(System.ArtifactsDirectory)/_SBOM"

    # See https://aka.ms/sbom and https://aka.ms/CyberEoM2SBOM
    # and specifically https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/ado-sbom-generator
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'SBOM Generation Task'
      condition: succeeded()
      # What do we do for this?  There is no output directory - it is a container build
      inputs:
        BuildDropPath: '$(System.ArtifactsDirectory)/_SBOM'

    # Show the contents of the SBOM in the build output logs
    - task: Bash@3
      displayName: 'View SBOM'
      condition: succeeded()
      inputs:
        targetType: 'inline'
        script: |
          echo "Showing the SBOM contents, just because"
          for f in $(find "$(System.ArtifactsDirectory)/_SBOM/_manifest" -type f); do
            echo
            ls -l $f
            [[ $f == *.json ]] && sha256sum $f
            echo "==== START: $f"
            [[ $f == *.json ]] && jq . $f || cat $f
            echo
            echo "==== END: $f"
            echo
          done
          true

    ## SBOM
    ################################################################################

    - task: Docker@2  
      displayName: 'Push ${{ variables.repositorydocker }}'  
      condition: and(succeeded(), in(variables['Build.Reason'], 'Manual', 'Schedule', 'IndividualCI', 'BatchedCI'))  
      inputs:  
        command: 'push'  
        containerRegistry: 'acrbn-acr'  
        repository: '$(repositorydocker)'  
        tags: |  
          $(repositorydocker)  
          $(repositorydocker)-$(Build.BuildId)  
