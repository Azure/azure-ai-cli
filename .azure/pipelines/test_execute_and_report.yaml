parameters:
  test_adapter_name: Azure.AI.CLI.TestAdapter
  TestFilter: 'TestCategory!=SkipOnVSTS'
  envToSet: ''
  testName: Run ai-cli tests
steps:

# -----------------------------------------------------------------------------
# Ensure we can use the appropriate Java, Go, and NodeJs tools
# -----------------------------------------------------------------------------
- bash: |
    sudo apt update
    sudo apt install -y msopenjdk-21
  displayName: 'Install msopenjdk-21'
  continueOnError: true
# Equivalent to: sudo apt-get install -y golang-go
- task: GoTool@0
  displayName: 'Use Go 1.18'
  inputs:
    version: '1.18'
  continueOnError: true

# Equivalent to:
#   curl -fsSL https://deb.nodesource.com/setup_21.x | sudo -E bash - &&\
#   sudo apt-get install -y nodejs
- task: NodeTool@0
  displayName: 'Use Node.js 21.x'
  inputs:
    versionSpec: '21.x'
  continueOnError: true

# -----------------------------------------------------------------------------
# Run the tests
# -----------------------------------------------------------------------------
- task: AzureCLI@2
  displayName: ${{ parameters.testName }}
  continueOnError: true
  inputs:
    azureSubscription: 'AI_CLI_TestAdapter'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az --version
      az account show

      cd $(TestResultsPath)
      IFS=';' read -ra ENV_VARS <<< "${{ parameters.envToSet }}"  
      for env_var in "${ENV_VARS[@]}"; do  
        echo "Setting $env_var"
        export "$env_var"  
      done  
      
      echo
      echo "Running Docker containers"
      docker ps
      echo
      echo "Current Environment Variables"
      env
      echo
      
      echo dotnet test --logger trx --results-directory "$(Agent.TempDirectory)" --logger:"trx;LogFileName=$(TestRunTrxFileName)-${{ parameters.test_adapter_name }}.trx" --logger:"console;verbosity=normal" --filter "${{ parameters.TestFilter }}" "$(LocalBinOutputPath)/$(BuildConfiguration)/net8.0/${{ parameters.test_adapter_name }}.dll"   
      dotnet test --logger trx --results-directory "$(Agent.TempDirectory)" --logger:"trx;LogFileName=$(TestRunTrxFileName)-${{ parameters.test_adapter_name }}.trx" --logger:"console;verbosity=normal" --filter "${{ parameters.TestFilter }}" "$(LocalBinOutputPath)/$(BuildConfiguration)/net8.0/${{ parameters.test_adapter_name }}.dll"   

# -----------------------------------------------------------------------------
# Archive and publish the test run backup artifact
# -----------------------------------------------------------------------------
- task: ArchiveFiles@2
  displayName: Archive ai-cli-test run backup artifact (build/bin)
  continueOnError: true
  inputs:
    rootFolderOrFile: '$(LocalBinOutputPath)'
    includeRootFolder: false
    archiveFile: '$(TestBackupArtifactFile)'
    replaceExistingArchive: false

- task: ArchiveFiles@2
  displayName: Archive ai-cli-test run backup artifact (testresults)
  continueOnError: true
  inputs:
    rootFolderOrFile: '$(TestResultsPath)'
    includeRootFolder: false
    archiveFile: '$(TestBackupArtifactFile)'
    replaceExistingArchive: false

- task: PublishBuildArtifacts@1
  displayName: Publish ai-cli-test run backup artifact
  continueOnError: true
  retryCountOnTaskFailure: 5
  inputs:
    parallel: true
    pathToPublish: '$(TestBackupArtifactFile)'
    artifactName: TestRunBackup

# -----------------------------------------------------------------------------
# Publish the test results
# -----------------------------------------------------------------------------
- task: PublishTestResults@2
  displayName: Publish ai-cli test results
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '$(TestRunTrxFileName)-${{ parameters.test_adapter_name }}.trx' 
    testRunTitle: '$(TestRunTitle)'
    failTaskOnFailedTests: true