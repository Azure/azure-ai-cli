trigger:
  branches:
    include:
      - main
      - refs/tags/*
pr:
  - main

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Setup
    steps:
    - task: Bash@3
      name: Variables
      inputs:
        filePath: ./.azure/pipelines/scripts/set-variables.sh
      displayName: 'Set up environment variables'

  - job: Build
    dependsOn: Setup
    variables:
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: restore
        projects: 'src/ai/**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: 'src/ai/**/*.csproj'
        arguments: '--configuration Release'
    - task: DotNetCoreCLI@2
      displayName: Pack
      env:
        AI_VERSION: $(AICLIVersion)
      inputs:
        command: pack
        packagesToPack: 'src/ai/ai-cli.csproj'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'AI_VERSION'
        arguments: '--configuration Release'
    - task: Bash@3
      displayName: 'Create installation script'
      inputs:
        filePath: ./scripts/InstallAzureAICLIDeb-UpdateVersion.sh
        arguments: '$(AICLIVersion) $(Build.StagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'ai-cli-artifacts'

  - job: Publish
    dependsOn: [Setup, Build]
    variables:
      IsRelease: $[ dependencies.Setup.outputs['Variables.IsRelease']]
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
      AICLINuPkgFileName: $[ dependencies.Setup.outputs['Variables.AICLINuPkgFileName']]
    condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts
      inputs:
        artifact: 'ai-cli-artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: AzureCLI@2
      displayName: Upload NuGet package
      inputs:
        azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
        scriptType: 'bash'
        arguments: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName) private/ai/$(AICLINuPkgFileName)'
        scriptPath: './.azure/pipelines/scripts/upload-file.sh'
    - task: AzureCLI@2
      displayName: Upload installation script
      inputs:
        azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
        scriptType: 'bash'
        arguments: '$(Build.ArtifactStagingDirectory)/InstallAzureAICLIDeb-$(AICLIVersion).sh private/ai/InstallAzureAICLIDeb-$(AICLIVersion).sh'
        scriptPath: './.azure/pipelines/scripts/upload-file.sh'
    - task: GithubRelease@1
      displayName: Create GitHub release
      inputs:
        gitHubConnection: 'AzureGH'
        tagSource: gitTag
        title: 'Azure AI CLI $(AICLIVersion)'
        releaseNotesSource: inline
        addChangeLog: true
        releaseNoteInline: |
          Version $(AICLIVersion) of the Azure AI CLI.

  - job: DockerImages
    dependsOn: [Setup, Build, Publish]
    variables:
      IsRelease: $[ dependencies.Setup.outputs['Variables.IsRelease']]
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
      AICLINuPkgFileName: $[ dependencies.Setup.outputs['Variables.AICLINuPkgFileName']]
    condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
    strategy:
      matrix:
        debian10:
          dockerfile: 'dockerfiles/debian10.Dockerfile'
          tag: 'buster'
        debian11:
          dockerfile: 'dockerfiles/debian11.Dockerfile'
          tag: 'bullseye'
        debian12:
          dockerfile: 'dockerfiles/debian12.Dockerfile'
          tag: 'bookworm'
        ubuntu2004:
          dockerfile: 'dockerfiles/ubuntu2004.Dockerfile'
          tag: 'focal'
        ubuntu2204:
          dockerfile: 'dockerfiles/ubuntu2204.Dockerfile'
          tag: 'bionic'
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        containerRegistry: 'acrbn-acr'
        command: 'login'
    - task: Docker@2
      displayName: Build and push ($(dockerfile))
      inputs:
        command: 'buildAndPush'
        Dockerfile: $(dockerfile)
        arguments: '--build-arg AZURE_CLI_VERSION=$(AICLIVersion) --build-arg DOWNLOAD_SCRIPT=true'
        buildContext: '.'
        containerRegistry: 'acrbn-acr'
        repository: 'azure-ai-cli'
        tags: '$(tag)-$(AICLIVersion)'
    - task: Docker@2
      displayName: Tag latest $(tag) image
      inputs:
        command: 'tag'
        containerRegistry: 'acrbn-acr'
        arguments: 'azure-ai-cli:$(tag)-$(AICLIVersion) azure-ai-cli:$(tag)'
    - task: Docker@2
      displayName: Tag latest 'bookworm' image ($(tag)==bookworm?)
      condition: eq(variables['tag'], 'bionic')
      inputs:
        command: 'tag'
        containerRegistry: 'acrbn-acr'
        arguments: 'azure-ai-cli:$(tag)-$(AICLIVersion) azure-ai-cli:latest'

