trigger:
  branches:
    include:
      - main
      - refs/tags/*
pr:
  - main

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Setup
    steps:
    - task: Bash@3
      name: Variables
      inputs:
        filePath: ./.azure/pipelines/scripts/set-variables.sh
      displayName: 'Set up environment variables'

  - job: Build
    dependsOn: Setup
    variables:
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore packages
      inputs:
        command: restore
        projects: 'src/ai/**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: 'src/ai/**/*.csproj'
        arguments: '--configuration Release'
    - task: DotNetCoreCLI@2
      displayName: Pack
      env:
        AI_VERSION: $(AICLIVersion)
      inputs:
        command: pack
        packagesToPack: 'src/ai/ai-cli.csproj'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'AI_VERSION'
        arguments: '--configuration Release'
    - task: Bash@3
      displayName: 'Create installation script'
      inputs:
        filePath: ./scripts/InstallAzureAICLIDeb-UpdateVersion.sh
        arguments: '$(AICLIVersion) $(Build.StagingDirectory)'
    - task: PublishPipelineArtifact@1
      displayName: Publish artifacts
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'ai-cli-artifacts'

  - job: Publish
    dependsOn: [Setup, Build]
    variables:
      IsRelease: $[ dependencies.Setup.outputs['Variables.IsRelease']]
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
      AICLINuPkgFileName: $[ dependencies.Setup.outputs['Variables.AICLINuPkgFileName']]
    condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts
      inputs:
        artifact: 'ai-cli-artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: AzureCLI@2
      displayName: Upload NuGet package
      inputs:
        azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
        scriptType: 'bash'
        arguments: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName) private/ai/$(AICLINuPkgFileName)'
        scriptPath: './.azure/pipelines/scripts/upload-file.sh'
    - task: AzureCLI@2
      displayName: Upload installation script
      inputs:
        azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
        scriptType: 'bash'
        arguments: '$(Build.ArtifactStagingDirectory)/InstallAzureAICLIDeb-$(AICLIVersion).sh private/ai/InstallAzureAICLIDeb-$(AICLIVersion).sh'
        scriptPath: './.azure/pipelines/scripts/upload-file.sh'
    - task: GithubRelease@1
      displayName: Create GitHub release
      inputs:
        gitHubConnection: 'AzureGH'
        tagSource: gitTag
        title: 'Azure AI CLI $(AICLIVersion)'
        releaseNotesSource: inline
        addChangeLog: true
        releaseNoteInline: |
          Version $(AICLIVersion) of the Azure AI CLI.

  - job: DockerImages
    dependsOn: [Setup, Build, Publish]
    variables:
      IsRelease: $[ dependencies.Setup.outputs['Variables.IsRelease']]
      AICLIVersion: $[ dependencies.Setup.outputs['Variables.AICLIVersion']]
      AICLINuPkgFileName: $[ dependencies.Setup.outputs['Variables.AICLINuPkgFileName']]
    condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
    strategy:
        matrix:
          debian10:
            dockerfile: 'dockerfiles/debian10.Dockerfile'
            tag: 'buster-$(AICLIVersion)'
          debian11:
            dockerfile: 'dockerfiles/debian11.Dockerfile'
            tag: 'bullseye-$(AICLIVersion)'
          debian12:
            dockerfile: 'dockerfiles/debian12.Dockerfile'
            tag: 'bookworm-$(AICLIVersion)'
          ubuntu2004:
            dockerfile: 'dockerfiles/ubuntu2004.Dockerfile'
            tag: 'focal-$(AICLIVersion)'
          ubuntu2204:
            dockerfile: 'dockerfiles/ubuntu2204.Dockerfile'
            tag: 'bionic-$(AICLIVersion)'
    steps:
    - task: Docker@2
      displayName: Build Docker image (${{ matrix.dockerfile }})
      inputs:
        command: 'build'
        Dockerfile: ${{ matrix.dockerfile }}
        buildContext: '.'
        tags: |
          azure.ai.cli:${{ matrix.tag }}
        arguments: '--build-arg AZURE_CLI_VERSION=$(AICLIVersion) --build-arg DOWNLOAD_SCRIPT=true'
    # - task: Docker@2
    #   inputs:
    #     command: 'push'
    #     containerRegistry: 'Carbon Dropper (CSSpeechStorage Drop)'
    #     repository: 'azure.ai.cli'
    #     tags: |
    #       azure.ai.cli:${{ matrix.tag }}