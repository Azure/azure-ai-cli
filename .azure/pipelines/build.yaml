trigger:
  branches:
    include:
      - main
      - refs/tags/*
pr:
  - main

pool:
  name: $(UbuntuPipelineName)

parameters:
- name: signNugetPackages
  displayName: Sign NuGet packages
  type: boolean
  default: true
- name: telemetryType
  displayName: Telemetry to use
  type: string
  default: None
  values:
  - None
  - Aria

variables:
- group: 'Azure AI CLI Telemetry configuration'
- name: telemetry.type
  # NOTE: Do NOT change the name of this variable without also updating the corresponding
  # src\ai\.x\config\telemetry.config.json file. This name needs to be a JPath like
  # expression to replace a specific value in that CLI telemetry JSON configuration in the
  # FileTransform step in the BuildStage below
  value: ${{ parameters.telemetryType }}
- name: telemetry.aria.tenantId
  # NOTE: Do NOT change the name of this variable without updating the telemetry JSON config
  value: $(AriaTenantId_Release)

stages:

- stage: SetupStage
  jobs:
  - job: SetupJob
    steps:
    - task: Bash@3
      name: Variables
      inputs:
        filePath: ./.azure/pipelines/scripts/set-variables.sh
        arguments: '$(PublishDevBuild) $(Build.BuildNumber) $(Build.BuildId)'
      displayName: 'Set up environment variables'

- stage: BuildStage
  dependsOn: SetupStage
  jobs:

    - job: Build
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
        AI_CLI_ENABLE_TELEMETRY: 1
      steps:
      - task: FileTransform@1
        displayName: 'Update telemetry configuration'
        inputs:
          folderPath: '$(Build.SourcesDirectory)/src/ai/.x/config'
          fileType: json
          targetFiles: telemetry.config.json
      - task: NuGetAuthenticate@1
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: 'src/ai/**/*.csproj'
          arguments: '--configuration Release -p:CLIAssemblyVersion=$(AICLISemVerVersion) -p:CLIAssemblyInformationalVersion=$(AICLIVersion)'
      - task: DotNetCoreCLI@2
        displayName: Pack
        inputs:
          command: custom
          custom: 'pack'
          projects: 'src/ai/ai-cli.csproj'
          arguments: '--configuration Release -p:CLIAssemblyVersion=$(AICLISemVerVersion) -p:CLIAssemblyInformationalVersion=$(AICLIVersion) -p:PackageVersion=$(AICLIVersion) -o "$(Build.ArtifactStagingDirectory)"'
      - ${{ if eq(parameters.signNugetPackages, true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET Core 6.0 (signing requirement for EsrpCodeSigning@4)'
          inputs:
            packageType: 'sdk'
            version: '6.0.x'
        - template: sign-nuget.yaml
          parameters:
            displayName: 'Sign AI CLI NuGet package'
            folderPath: '$(Build.ArtifactStagingDirectory)'
            pattern: '$(AICLINuPkgFileName)'
      - task: Bash@3
        displayName: 'Create installation script'
        inputs:
          filePath: ./scripts/InstallAzureAICLIDeb-UpdateVersion.sh
          arguments: '$(AICLIVersion) $(Build.StagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          targetPath: '$(Build.StagingDirectory)'
          artifactName: 'ai-cli-artifacts'

    - job: Publish
      dependsOn: [Build]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
      condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: Download artifacts
        inputs:
          artifact: 'ai-cli-artifacts'
          targetPath: '$(Build.ArtifactStagingDirectory)'
      - task: AzureCLI@2
        displayName: Upload NuGet package
        inputs:
          azureSubscription: 'Carbon Dropper2 (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName) private/ai/$(AICLINuPkgFileName)'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
      - task: AzureCLI@2
        displayName: Upload installation script
        inputs:
          azureSubscription: 'Carbon Dropper2 (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/InstallAzureAICLIDeb-$(AICLIVersion).sh private/ai/InstallAzureAICLIDeb-$(AICLIVersion).sh'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
      - task: GithubRelease@1
        condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
        displayName: Create GitHub release
        inputs:
          gitHubConnection: 'AzureGH'
          tagSource: gitTag
          title: 'Azure AI CLI $(AICLIVersion)'
          releaseNotesSource: inline
          addChangeLog: true
          releaseNoteInline: |
            Version $(AICLIVersion) of the Azure AI CLI.

    - job: DockerImages
      dependsOn: [Build, Publish]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
      condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
      strategy:
        matrix:
          debian10:
            dockerfile: 'dockerfiles/debian10.Dockerfile'
            tags: |
              buster-$(AICLIVersion)
          debian11:
            dockerfile: 'dockerfiles/debian11.Dockerfile'
            tags: |
              bullseye-$(AICLIVersion)
          debian12:
            dockerfile: 'dockerfiles/debian12.Dockerfile'
            tags: |
              bookworm-$(AICLIVersion)
          ubuntu2004:
            dockerfile: 'dockerfiles/ubuntu2004.Dockerfile'
            tags: |
              focal-$(AICLIVersion)
          ubuntu2204:
            dockerfile: 'dockerfiles/ubuntu2204.Dockerfile'
            tags: |
              jammy-$(AICLIVersion)
      steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: 'acrbn-acr'
          command: 'login'
      - task: Docker@2
        displayName: Build ($(dockerfile) - $(AICLIVersion) - $(tags))
        inputs:
          command: 'build'
          containerRegistry: 'acrbn-acr'
          repository: 'azure-ai-cli'
          Dockerfile: $(dockerfile)
          arguments: '--build-arg AZURE_CLI_VERSION=$(AICLIVersion) --build-arg DOWNLOAD_SCRIPT=true'
          buildContext: '.'
          tags: |
            $(tags)
      - task: Docker@2
        displayName: Push ($(dockerfile) - $(tags))
        inputs:
          command: 'push'
          containerRegistry: 'acrbn-acr'
          repository: 'azure-ai-cli'
          tags: |
            $(tags)

    - job: TagLatest
      dependsOn: [Build, Publish, DockerImages]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
      condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
      steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: 'acrbn-acr'
          command: 'login'
      - task: Bash@3
        displayName: Tag Latest
        inputs:
          targetType: 'inline'
          script: |
            docker pull acrbn.azurecr.io/azure-ai-cli:bookworm-$(AICLIVersion)
            docker tag acrbn.azurecr.io/azure-ai-cli:bookworm-$(AICLIVersion) acrbn.azurecr.io/azure-ai-cli:latest
            docker push acrbn.azurecr.io/azure-ai-cli:latest

- stage: BuildInstallerStage
  dependsOn: SetupStage
  condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
  pool:
    name: $(WindowsPipelineName)
  jobs:
    - job: BuildWindowsInstaller
      variables:
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
      steps:
      - script: call WixBuildInstaller.cmd $(AICLIVersion) $(AICLISemVerVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Build installation package bundle

      - script: call WixRunInsignia.cmd detach x64 $(AICLIVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Detach bundle bootstrap engine

      - template: sign-dll-exe.yaml
        parameters:
          displayName: Sign bundle bootstrap engine
          folderPath: '$(Build.SourcesDirectory)/scripts'
          pattern: 'engine-*.exe'

      - script: call WixRunInsignia.cmd attach x64 $(AICLIVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Re-attach bootstrap bundle engine

      - template: sign-dll-exe.yaml
        parameters:
          displayName: Sign installer
          folderPath: '$(Build.SourcesDirectory)/scripts'
          pattern: 'Azure-AI-CLI-Setup-*.exe'

      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/scripts'
          contents: 'Azure-AI-CLI-Setup-*.exe'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
        displayName: Copy files

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          targetPath: '$(Build.StagingDirectory)'
          artifactName: 'ai-cli-artifacts'
        displayName: Publish artifacts

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'Carbon Dropper2 (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/Azure-AI-CLI-Setup-$(AICLIVersion)-x64.exe private/ai/Azure-AI-CLI-Setup-$(AICLIVersion)-x64.exe'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
        displayName: Upload Windows installer

- stage: TestStage
  dependsOn: [SetupStage, BuildStage]
  condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['TestDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
    BuildConfiguration: 'ReleaseUnixOS'
    LocalBinOutputPath: '$(Build.SourcesDirectory)/tests/build/bin'
    LocalInputPath: '$(Build.SourcesDirectory)/tests'
    TargetFolder: '$(System.DefaultWorkingDirectory)'
    TestFilter: 'cli=ai&tag!=skip'
    TestResultsPath: '$(Build.SourcesDirectory)/testresults'
    TestRunTitle: 'Azure AI CLI $(AICLIVersion) ($(BuildConfiguration)-$(Build.BuildNumber))'
    TestRunTrxFileName: '$(TestResultsPath)/ai-cli-test-results-$(BuildConfiguration)-$(Build.BuildNumber)'
    TestBackupArtifactFile: '$(Build.ArtifactStagingDirectory)/ai-cli-test-run-backup-artifact-$(BuildConfiguration)-$(Build.BuildNumber).zip'
  jobs:
  - job: TestJob
    steps:
    - template: test_setup.yaml
    - template: docker_proxy_setup.yaml

    - template: test_execute_and_report.yaml
      parameters:
        test_adapter_name: Azure.AI.CLI.RecordedTestAdapter
        TestFilter: $(TestFilter)
        envToSet: 'TEST_MODE=Playback;REQUESTS_CA_BUNDLE=/ca/ca.crt'

    - script: |
        docker logs nginx
        docker stop nginx
        docker rm nginx
        docker logs test-proxy
        docker stop test-proxy
        docker rm test-proxy
      displayName: Stop nginx-recording-test-proxy locally

    - template: test_execute_and_report.yaml
      parameters:
        test_adapter_name: Azure.AI.CLI.TestAdapter
        TestFilter: $(TestFilter)&tag!=recordable  
    
- stage: ManualApproval
  dependsOn: [SetupStage, BuildStage, TestStage]
  condition: and(succeeded(), or(eq(stageDependencies.SetupStage.outputs['SetupJob.Variables.IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
  jobs:

  - job: ManualApprovalSteps
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 5
      inputs:
        notifyUsers: |
          robch@microsoft.com
          brianem@microsoft.com
        instructions: Approve publish ai version publicly to NuGet.org
        onTimeout: reject

- stage: PublishPublic
  dependsOn: [SetupStage, BuildStage, TestStage, ManualApproval]
  condition: and(succeeded(), or(eq(stageDependencies.SetupStage.outputs['SetupJob.Variables.IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
  jobs:

  - job: PublishToNuGet
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts
      inputs:
        artifact: 'ai-cli-artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: NuGetCommand@2
      displayName: 'Publish nuget package to NuGet.org'
      inputs:
        command: push
        nuGetFeedType: external
        publishFeedCredentials: 'AzureAICLI(NugetPublishing)'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName)'
