trigger:
  branches:
    include:
      - main
      - refs/tags/*
pr:
  - main

pool:
  name: SkymanUbuntu2004Hosted

stages:

- stage: SetupStage
  jobs:
  - job: SetupJob
    steps:
    - task: Bash@3
      name: Variables
      inputs:
        filePath: ./.azure/pipelines/scripts/set-variables.sh
        arguments: '$(Build.BuildNumber) $(Build.BuildId)'
      displayName: 'Set up environment variables'

- stage: BuildStage
  dependsOn: SetupStage
  jobs:

    - job: Build
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
      steps:
      - task: DotNetCoreCLI@2
        displayName: Restore packages
        inputs:
          command: restore
          projects: 'src/ai/**/*.csproj'
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: 'src/ai/**/*.csproj'
          arguments: '--configuration Release -p:CLIAssemblyVersion=$(AICLISemVerVersion) -p:CLIAssemblyInformationalVersion=$(AICLIVersion)'
      - task: DotNetCoreCLI@2
        displayName: Pack
        inputs:
          command: custom
          custom: 'pack'
          projects: 'src/ai/ai-cli.csproj'
          arguments: '--configuration Release -p:CLIAssemblyVersion=$(AICLISemVerVersion) -p:CLIAssemblyInformationalVersion=$(AICLIVersion) -p:PackageVersion=$(AICLIVersion) -o "$(Build.ArtifactStagingDirectory)"'
      - task: UseDotNet@2
        displayName: 'Use .NET Core 2.1 (signing requirement)'
        inputs:
          packageType: 'sdk'
          version: '2.1.x'
      - template: sign-nuget.yaml
        parameters:
          displayName: 'Sign AI CLI NuGet package'
          folderPath: '$(Build.ArtifactStagingDirectory)'
          pattern: '$(AICLINuPkgFileName)'
      - task: Bash@3
        displayName: 'Create Linux installation script'
        inputs:
          filePath: ./scripts/InstallAzureAICLIDeb-UpdateVersion.sh
          arguments: '$(AICLIVersion) $(Build.StagingDirectory)'
      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          targetPath: '$(Build.StagingDirectory)'
          artifactName: 'ai-cli-artifacts'

    - job: Publish
      dependsOn: [Build]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
      condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: Download artifacts
        inputs:
          artifact: 'ai-cli-artifacts'
          targetPath: '$(Build.ArtifactStagingDirectory)'
      - task: AzureCLI@2
        displayName: Upload NuGet package
        inputs:
          azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName) private/ai/$(AICLINuPkgFileName)'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
      - task: AzureCLI@2
        displayName: Upload Linux installation script
        inputs:
          azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/InstallAzureAICLIDeb-$(AICLIVersion).sh private/ai/InstallAzureAICLIDeb-$(AICLIVersion).sh'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
      - task: AzureCLI@2
        displayName: Upload Windows installer
        inputs:
          azureSubscription: 'Carbon Dropper (CSSpeechStorage Drop)'
          scriptType: 'bash'
          arguments: '$(Build.ArtifactStagingDirectory)/Azure-AI-CLI-Setup-$(AICLIVersion)-x64.exe private/ai/Azure-AI-CLI-Setup-$(AICLIVersion)-x64.exe'
          scriptPath: './.azure/pipelines/scripts/upload-file.sh'
      - task: GithubRelease@1
        condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
        displayName: Create GitHub release
        inputs:
          gitHubConnection: 'AzureGH'
          tagSource: gitTag
          title: 'Azure AI CLI $(AICLIVersion)'
          releaseNotesSource: inline
          addChangeLog: true
          releaseNoteInline: |
            Version $(AICLIVersion) of the Azure AI CLI.

    - job: DockerImages
      dependsOn: [Build, Publish]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
      condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
      strategy:
        matrix:
          debian10:
            dockerfile: 'dockerfiles/debian10.Dockerfile'
            tags: |
              buster-$(AICLIVersion)
          debian11:
            dockerfile: 'dockerfiles/debian11.Dockerfile'
            tags: |
              bullseye-$(AICLIVersion)
          debian12:
            dockerfile: 'dockerfiles/debian12.Dockerfile'
            tags: |
              bookworm-$(AICLIVersion)
          ubuntu2004:
            dockerfile: 'dockerfiles/ubuntu2004.Dockerfile'
            tags: |
              focal-$(AICLIVersion)
          ubuntu2204:
            dockerfile: 'dockerfiles/ubuntu2204.Dockerfile'
            tags: |
              jammy-$(AICLIVersion)
      steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: 'acrbn-acr'
          command: 'login'
      - task: Docker@2
        displayName: Build ($(dockerfile) - $(AICLIVersion) - $(tags))
        inputs:
          command: 'build'
          containerRegistry: 'acrbn-acr'
          repository: 'azure-ai-cli'
          Dockerfile: $(dockerfile)
          arguments: '--build-arg AZURE_CLI_VERSION=$(AICLIVersion) --build-arg DOWNLOAD_SCRIPT=true'
          buildContext: '.'
          tags: |
            $(tags)
      - task: Docker@2
        displayName: Push ($(dockerfile) - $(tags))
        inputs:
          command: 'push'
          containerRegistry: 'acrbn-acr'
          repository: 'azure-ai-cli'
          tags: |
            $(tags)

    - job: TagLatest
      dependsOn: [Build, Publish, DockerImages]
      variables:
        IsRelease: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.IsRelease']]
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
      condition: and(succeeded(), eq(variables['IsRelease'], 'true'))
      steps:
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: 'acrbn-acr'
          command: 'login'
      - task: Bash@3
        displayName: Tag Latest
        inputs:
          targetType: 'inline'
          script: |
            docker pull acrbn.azurecr.io/azure-ai-cli:bookworm-$(AICLIVersion)
            docker tag acrbn.azurecr.io/azure-ai-cli:bookworm-$(AICLIVersion) acrbn.azurecr.io/azure-ai-cli:latest
            docker push acrbn.azurecr.io/azure-ai-cli:latest

- stage: BuildInstallerStage
  dependsOn: SetupStage
  pool:
    name: SkymanWS2022Compliant
  jobs:
    - job: BuildWindowsInstaller
      variables:
        AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
        AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
      steps:
      - script: call WixBuildInstaller.cmd $(AICLIVersion) $(AICLISemVerVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Build installation package bundle

      - script: call WixRunInsignia.cmd detach x64 $(AICLIVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Detach bundle bootstrap engine

      - template: sign-dll-exe.yaml
        parameters:
          displayName: Sign bundle bootstrap engine
          folderPath: '$(Build.SourcesDirectory)/scripts'
          pattern: 'engine-*.exe'

      - script: call WixRunInsignia.cmd attach x64 $(AICLIVersion)
        workingDirectory: $(Build.SourcesDirectory)/scripts
        failOnStderr: true
        displayName: Re-attach bootstrap bundle engine

      - template: sign-dll-exe.yaml
        parameters:
          displayName: Sign installer
          folderPath: '$(Build.SourcesDirectory)/scripts'
          pattern: 'Azure-AI-CLI-Setup-*.exe'

      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/scripts'
          contents: 'Azure-AI-CLI-Setup-*.exe'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
        displayName: Copy files

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)'
          targetPath: '$(Build.StagingDirectory)'
          artifactName: 'ai-cli-artifacts'
        displayName: Publish artifacts

- stage: TestStage
  dependsOn: [SetupStage, BuildStage]
  condition: and(succeeded(), or(eq(variables['IsRelease'], 'true'), eq(variables['TestDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLISemVerVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLISemVerVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
    BuildConfiguration: 'ReleaseUnixOS'
    LocalBinOutputPath: '$(Build.SourcesDirectory)/tests/build/bin'
    LocalInputPath: '$(Build.SourcesDirectory)/tests'
    TargetFolder: '$(System.DefaultWorkingDirectory)'
    TestFilter: 'cli=ai&tag!=skip'
    TestResultsPath: '$(Build.SourcesDirectory)/testresults'
    TestRunTitle: 'Azure AI CLI $(AICLIVersion) ($(BuildConfiguration)-$(Build.BuildNumber))'
    TestRunTrxFileName: '$(TestResultsPath)/ai-cli-test-results-$(BuildConfiguration)-$(Build.BuildNumber).trx'
    TestBackupArtifactFile: '$(Build.ArtifactStagingDirectory)/ai-cli-test-run-backup-artifact-$(BuildConfiguration)-$(Build.BuildNumber).zip'
  jobs:
  - job: TestJob
    steps:

    # -----------------------------------------------------------------------------
    # Download the ai CLI artifacts
    # -----------------------------------------------------------------------------
    - task: DownloadPipelineArtifact@2
      displayName: Download ai-cli-artifacts
      inputs:
        artifact: 'ai-cli-artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)/ai-cli-artifacts'
    - task: CopyFiles@2
      displayName: Copy downloaded ai-cli-artifacts
      inputs:
        Contents: '**/*'
        SourceFolder: $(Build.ArtifactStagingDirectory)/ai-cli-artifacts
        TargetFolder: $(TargetFolder)
        FlattenFolders: true
    - task: Bash@3
      displayName: List files...
      inputs:
        targetType: 'inline'
        script: |
          echo listing for $(System.DefaultWorkingDirectory)
          ls -la $(System.DefaultWorkingDirectory)
          echo listing for $(Build.ArtifactStagingDirectory)
          ls -la $(Build.ArtifactStagingDirectory)

    # -----------------------------------------------------------------------------
    # Install the ai CLI
    # -----------------------------------------------------------------------------
    - task: DotNetCoreCLI@2
      displayName: INSTALL AI - Installing ai CLI via `dotnet tool install`
      inputs:
        includeNuGetOrg: false
        command: custom
        custom: tool
        version: '7.0.x'
        arguments: install
          --ignore-failed-sources
          --add-source "$(System.DefaultWorkingDirectory)"
          --global Azure.AI.CLI
          --version "$(AICLIVersion)"

    # -----------------------------------------------------------------------------
    # Finish job prep (mkdir, config cli)
    # -----------------------------------------------------------------------------
    - bash: |
        env | sort
        which dotnet
        dotnet --version
        echo "TestResultsPath: $(TestResultsPath)"
        mkdir $(TestResultsPath)
        echo "LocalInputPath: $(LocalInputPath)"
        ls -la $(LocalInputPath)
        ai config system --set input.path $(LocalInputPath)
        ai config --find
        echo "DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
        ls -la $(System.DefaultWorkingDirectory)
      displayName: Finish job prep (mkdir, config cli)
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    # -----------------------------------------------------------------------------
    # Build the YamlTestAdapter
    # -----------------------------------------------------------------------------
    - task: DotNetCoreCLI@2
      displayName: Build YamlTestAdapter
      inputs:
        includeNuGetOrg: false
        command: build
        version: '7.0.x'
        projects: '**/testadapter/YamlTestAdapter.csproj'
        arguments:
          -c $(BuildConfiguration)
          /p:Platform=x64
          /p:LocalBinOutputPath="$(LocalBinOutputPath)"

    # -----------------------------------------------------------------------------
    # Run the tests
    # -----------------------------------------------------------------------------
    - task: AzureCLI@2
      displayName: Run ai-cli tests
      continueOnError: true
      inputs:
        azureSubscription: 'AI_CLI_TestAdapter'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az --version
          az account show
          cd $(TestResultsPath)
          echo dotnet test --logger trx --results-directory "$(Agent.TempDirectory)" --logger:"trx;LogFileName=$(TestRunTrxFileName)" --logger:"console;verbosity=normal" --filter "$(TestFilter)" "$(LocalBinOutputPath)/$(BuildConfiguration)/net7.0/Azure.AI.CLI.TestAdapter.dll"
          dotnet test --logger trx --results-directory "$(Agent.TempDirectory)" --logger:"trx;LogFileName=$(TestRunTrxFileName)" --logger:"console;verbosity=normal" --filter "$(TestFilter)" "$(LocalBinOutputPath)/$(BuildConfiguration)/net7.0/Azure.AI.CLI.TestAdapter.dll"

    # -----------------------------------------------------------------------------
    # Archive and publish the test run backup artifact
    # -----------------------------------------------------------------------------
    - task: ArchiveFiles@2
      displayName: Archive ai-cli-test run backup artifact (build/bin)
      continueOnError: true
      inputs:
        rootFolderOrFile: '$(LocalBinOutputPath)'
        includeRootFolder: false
        archiveFile: '$(TestBackupArtifactFile)'
        replaceExistingArchive: false

    - task: ArchiveFiles@2
      displayName: Archive ai-cli-test run backup artifact (testresults)
      continueOnError: true
      inputs:
        rootFolderOrFile: '$(TestResultsPath)'
        includeRootFolder: false
        archiveFile: '$(TestBackupArtifactFile)'
        replaceExistingArchive: false

    - task: PublishBuildArtifacts@1
      displayName: Publish ai-cli-test run backup artifact
      continueOnError: true
      retryCountOnTaskFailure: 5
      inputs:
        parallel: true
        pathToPublish: '$(TestBackupArtifactFile)'
        artifactName: TestRunBackup

    # -----------------------------------------------------------------------------
    # Publish the test results
    # -----------------------------------------------------------------------------
    - task: PublishTestResults@2
      displayName: Publish ai-cli test results
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(TestRunTrxFileName)'
        testRunTitle: '$(TestRunTitle)'
        failTaskOnFailedTests: true

- stage: ManualApproval
  dependsOn: [SetupStage, BuildStage, TestStage]
  condition: and(succeeded(), or(eq(stageDependencies.SetupStage.outputs['SetupJob.Variables.IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
  jobs:

  - job: ManualApprovalSteps
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 5
      inputs:
        notifyUsers: |
          robch@microsoft.com
          brianem@microsoft.com
        instructions: Approve publish ai version publicly to NuGet.org
        onTimeout: reject

- stage: PublishPublic
  dependsOn: [SetupStage, BuildStage, TestStage, ManualApproval]
  condition: and(succeeded(), or(eq(stageDependencies.SetupStage.outputs['SetupJob.Variables.IsRelease'], 'true'), eq(variables['PublishDevBuild'], 'true')))
  variables:
    AICLIVersion: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLIVersion']]
    AICLINuPkgFileName: $[ stageDependencies.SetupStage.SetupJob.outputs['Variables.AICLINuPkgFileName']]
  jobs:

  - job: PublishToNuGet
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download artifacts
      inputs:
        artifact: 'ai-cli-artifacts'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: NuGetCommand@2
      displayName: 'Publish nuget package to NuGet.org'
      inputs:
        command: push
        nuGetFeedType: external
        publishFeedCredentials: 'AzureAICLI(NugetPublishing)'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/$(AICLINuPkgFileName)'
