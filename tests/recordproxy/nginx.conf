env TEST_PROXY_URL;  

http {  
     
    include       mime.types;  
    default_type  application/octet-stream; 
    
    log_format custom_log_format '[$time_local] $scheme - $x_recording_id - $x_recording_mode - $host - $hostname - $proxy_host - $request - $status - $body_bytes_sent - $http_referer - $http_user_agent'; 

    # ...  
    error_log /logs/log debug;
    access_log /logs/logfile.log custom_log_format;
    
    lua_shared_dict auto_ssl 1m;  
    lua_shared_dict auto_ssl_settings 64k;
    lua_package_path "/lua/?.lua;;"; 

    init_by_lua_block {  
            auto_ssl = (require "resty.auto-ssl").new()  
            local storage = require "storage"

            g_recordingId = "."
            g_recordingMode = "."

            auto_ssl:set("allow_domain", function(domain, auto_ssl, ssl_options)  
                return true  
                end)  
            auto_ssl:set("request_domain", function(ssl, ssl_options) 
                local dom = ssl.server_name()
                return dom
                end) 
            
            auto_ssl:init()  
            auto_ssl.storage = storage
    }  

    server {  

        # This section configures a proxy server on port 80 that allows clients to request connections to ports 80 or 443.
        # It then forwards all proxied traffic to port 443 in the same container.
        lua_need_request_body on;

        proxy_connect; 
        # Allowed ports for CONNECT requests  
        proxy_connect_allow 80 443;  
        resolver local=on; 
        listen 5004;  
        server_name test-proxy-nginx;  
        proxy_connect_address 127.0.0.1:5005;

        location /record/start
        {
            content_by_lua_block {  
                local header_methods = require "headers"
                header_methods:start("record")
            }  
        }

        location /record/stop
        {
            content_by_lua_block {  
                local header_methods = require "headers"
                header_methods:stop()
            }  
        }

        location /playback/start
        {
            content_by_lua_block {  
                local header_methods = require "headers"
                header_methods:start("playback")
            }  
        }
 
        location /playback/stop
        {
            content_by_lua_block {
                local header_methods = require "headers"
                header_methods:stop()
            }  
        }

        set_by_lua_block $test_proxy_url {  
            local test_proxy_url = os.getenv("TEST_PROXY_URL")  
            if test_proxy_url == nil then  
                return "http://host.docker.internal:5000"  -- Set a default value if MY_VAR is not set  
            else  
                return test_proxy_url  
            end  
        } 
        
        location /proxy/ {  
            internal;  
            rewrite ^/proxy(/.*)$ $1 break;  
            proxy_pass $test_proxy_url;
        
        }  

        location /admin/ {  
            proxy_pass $test_proxy_url;
        }  

        location /
        {
            root /certs;
        }
    }  
  
    server {  
        
        listen 5005 ssl;  
        server_name _;  
        resolver local=on;  

        ssl_certificate_by_lua_block {              
            local ok, err = auto_ssl:ssl_certificate()  
            if not ok then  
                ngx.log(ngx.ERR, "auto-ssl: failed to get certificate: ", err)  
            end  
        }  

        # Path to your SSL certificate and private key  
        ssl_certificate /certs/test.crt;  
        ssl_certificate_key /certs/test.key;  
  
        location / {  
            # Set the Nginx variable using Lua code  
            set_by_lua_block $x_recording_id {  
                return g_recordingId
            }
            set_by_lua_block $x_recording_mode {   
                return g_recordingMode
            }
            set_by_lua_block $test_proxy_url {  
                local test_proxy_url = os.getenv("TEST_PROXY_URL")  
                if test_proxy_url == nil then  
                    return "http://host.docker.internal:5000"  -- Set a default value if MY_VAR is not set  
                else  
                    return test_proxy_url  
                end  
            } 
            # Append two new headers  
            proxy_set_header x-recording-id $x_recording_id;  
            proxy_set_header x-recording-mode $x_recording_mode;  
              
            # Other proxy settings  

            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            proxy_set_header X-Forwarded-Proto $scheme;  
            proxy_set_header X-Recording-Upstream-Base-Uri $scheme://$http_host;
            
            # Set the fixed host to proxy the request to  
            proxy_pass $test_proxy_url;  
        }  
    }  
}  

events {  
    worker_connections 1024;  
}  