tests:
- name: ai init speech
  command: ai init speech
  tags: [before]
  arguments:
    subscription: e72e5254-f265-4e95-9bd2-9ee8e7329051
    name: robch-cranky-red-koala-ais
    interactive: false

- area: ai dev new speech tests
  tests:

  - area: ai dev new speech-to-text
    tests:

    - class: dev new speech-to-text (c#)
      steps:
      - name: generate template
        command: ai dev new speech-to-text --cs
      - name: build template
        bash: |
          cd speech-to-text-cs
          dotnet build
      # - name: run template
      #   command: ai dev shell --bash "cd speech-to-text-cs;./bin/Debug/net8.0/SpeechToText"
      #   tag: skip-run-requires-microphone

    - class: dev new speech-to-text (python)
      steps:
      - name: generate template
        command: ai dev new speech-to-text --py
      - name: install requirements
        bash: |
          cd speech-to-text-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      # - name: run template
      #   command: ai dev shell
      #   arguments:
      #     bash: |
      #       cd speech-to-text-py
      #       if [ -f /etc/os-release ]; then
      #         source env/bin/activate
      #         python3 main.py
      #       else
      #         source env/Scripts/activate
      #         python main.py
      #       fi
      #   tag: skip-run-requires-microphone

  - area: ai dev new speech-to-text-continuous-reco
    tests:

    - class: dev new speech-to-text-continuous-reco (c#)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-continuous-reco --cs
      - name: build template
        bash: |
          cd speech-to-text-continuous-reco-cs
          dotnet build
      # - name: run template
      #   command: ai dev shell --bash "cd speech-to-text-continuous-reco-cs;./bin/Debug/net8.0/SpeechToTextContinuous"
      #   tag: skip-run-requires-microphone

    - class: dev new speech-to-text-continuous-reco (python)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-continuous-reco --py
      - name: install requirements
        bash: |
          cd speech-to-text-continuous-reco-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      # - name: run template
      #   command: ai dev shell
      #   arguments:
      #     bash: |
      #       cd speech-to-text-continuous-reco-py
      #       if [ -f /etc/os-release ]; then
      #         source env/bin/activate
      #         python3 main.py
      #       else
      #         source env/Scripts/activate
      #         python main.py
      #       fi
      #   tag: skip-run-requires-microphone

  - area: ai dev new speech-to-text-with-file
    tests:

    - class: dev new speech-to-text-with-file (c#)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-file --cs
      - name: build template
        bash: |
          cd speech-to-text-with-file-cs
          dotnet build
      - name: create audio file for input
        command: ai speech synthesize --text "Hello world" --audio-output "speech-to-text-with-file-cs/hello.wav"
      - name: run template
        command: ai dev shell --bash "cd speech-to-text-with-file-cs;./bin/Debug/net8.0/SpeechToTextWithFile hello.wav"
        expect-regex: |
          Hello [Ww]orld.

    - class: dev new speech-to-text-with-file (python)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-file --py
      - name: install requirements
        bash: |
          cd speech-to-text-with-file-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      - name: create audio file for input
        command: ai speech synthesize --text "Hello world" --audio-output "speech-to-text-with-file-py/hello.wav"
      - name: run template
        command: ai dev shell
        arguments:
          bash: |
            cd speech-to-text-with-file-py
            if [ -f /etc/os-release ]; then
              source env/bin/activate
              python3 main.py hello.wav
            else
              source env/Scripts/activate
              python main.py hello.wav
            fi

  - area: ai dev new speech-to-text-with-keyword
    tests:

    - class: dev new speech-to-text-with-keyword (c#)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-keyword --cs
      - name: build template
        bash: |
          cd speech-to-text-with-keyword-cs
          dotnet build
      # - name: create audio file for input
      #   command: ai speech synthesize --text "Computer tell me a joke. Computer tell me another joke." --audio-output "speech-to-text-with-keyword-cs/jokes.wav"
      # - name: run template
      #   command: ai dev shell --bash "cd speech-to-text-with-keyword-cs;./bin/Debug/net8.0/SpeechToTextWithKeyword jokes.wav"
      #   tag: skip-run-requires-bugfix

    - class: dev new speech-to-text-with-keyword (python)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-keyword --py
      - name: install requirements
        bash: |
          cd speech-to-text-with-keyword-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      # - name: create audio file for input
      #   command: ai speech synthesize --text "Computer tell me a joke. Computer tell me another joke." --audio-output "speech-to-text-with-keyword-py/jokes.wav"
      # - name: run template
      #   command: ai dev shell
      #   arguments:
      #     bash: |
      #       cd speech-to-text-with-keyword-py
      #       if [ -f /etc/os-release ]; then
      #         source env/bin/activate
      #         python3 main.py jokes.wav
      #       else
      #         source env/Scripts/activate
      #         python main.py jokes.wav
      #       fi
      #   tag: skip-run-requires-bugfix
      
  - area: ai dev new speech-to-text-with-translation
    tests:

    - class: dev new speech-to-text-with-translation (c#)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-translation --cs
      - name: build template
        bash: |
          cd speech-to-text-with-translation-cs
          dotnet build
      - name: create audio file for input
        command: ai speech synthesize --text "Hello world" --audio-output "speech-to-text-with-translation-cs/hello.wav"
      - name: run template
        command: ai dev shell --bash "cd speech-to-text-with-translation-cs;./bin/Debug/net8.0/SpeechToTextWithTranslation hello.wav"
        expect-regex: |
          Hello [Ww]orld.

    - class: dev new speech-to-text-with-translation (python)
      steps:
      - name: generate template
        command: ai dev new speech-to-text-with-translation --py
      - name: install requirements
        bash: |
          cd speech-to-text-with-translation-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      - name: create audio file for input
        command: ai speech synthesize --text "Hello world" --audio-output "speech-to-text-with-translation-py/hello.wav"
      - name: run template
        command: ai dev shell
        arguments:
          bash: |
            cd speech-to-text-with-translation-py
            if [ -f /etc/os-release ]; then
              source env/bin/activate
              python3 main.py hello.wav
            else
              source env/Scripts/activate
              python main.py hello.wav
            fi

  - area: ai dev new text-to-speech
    tests:

    - class: dev new text-to-speech (c#)
      steps:
      - name: generate template
        command: ai dev new text-to-speech --cs
      - name: build template
        bash: |
          cd text-to-speech-cs
          dotnet build
      # - name: run template
      #   command: ai dev shell --bash "cd text-to-speech-cs;./bin/Debug/net8.0/TextToSpeech"
      #   input: |-
      #     Hello world.
      #   tag: skip-run-requires-speakers

    - class: dev new text-to-speech (python)
      steps:
      - name: generate template
        command: ai dev new text-to-speech --py
      - name: install requirements
        bash: |
          cd text-to-speech-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      # - name: run template
      #   command: ai dev shell
      #   arguments:
      #     bash: |
      #       cd text-to-speech-py
      #       if [ -f /etc/os-release ]; then
      #         source env/bin/activate
      #         python3 main.py
      #       else
      #         source env/Scripts/activate
      #         python main.py
      #       fi
      #   tag: skip-run-requires-speakers

  - area: ai dev new text-to-speech-with-file
    tests:

    - class: dev new text-to-speech-with-file (c#)
      steps:
      - name: generate template
        command: ai dev new text-to-speech-with-file --cs
      - name: build template
        bash: |
          cd text-to-speech-with-file-cs
          dotnet build
      - name: run template
        command: ai dev shell --bash "cd text-to-speech-with-file-cs;./bin/Debug/net8.0/TextToSpeechWithFile"
        input: |-
          Hello world.
    
    - class: dev new text-to-speech-with-file (python)
      steps:
      - name: generate template
        command: ai dev new text-to-speech-with-file --py
      - name: install requirements
        bash: |
          cd text-to-speech-with-file-py
          if [ -f /etc/os-release ]; then
            python3 -m venv env
            source env/bin/activate
          else
            python -m venv env
            source env/Scripts/activate
          fi
          pip install -r requirements.txt
      - name: run template
        command: ai dev shell
        arguments:
          bash: |
            cd text-to-speech-with-file-py
            if [ -f /etc/os-release ]; then
              source env/bin/activate
              python3 main.py
            else
              source env/Scripts/activate
              python main.py
            fi
        input: |-
          Hello world.

- area: ai speech synthesize
  tests:
  - name: Hello world
    command: ai speech synthesize --text "Hello world" --audio-output hello-world.wav
    parallelize: true
    expect-regex: |
      SYNTHESIS STARTED:
      SYNTHESIS COMPLETED:

- area: ai speech transcribe
  tests:
  - name: with file
    command: ai speech transcribe --file ../tests/audio/hello.wav
    parallelize: true
    expect-regex: |
      Hello.

  - name: with multiple files
    command: ai speech transcribe --files ../tests/audio/hello.wav;../tests/audio/hello.wav
    parallelize: true
    expect-regex: |
      Hello.
      Hello.

  - name: with url
    command: ai speech transcribe --url https://crbn.us/hello.wav
    parallelize: true
    expect-regex: |
      Hello.

  - name: with multiple urls
    command: ai speech transcribe --urls https://crbn.us/hello.wav;https://crbn.us/hello.wav
    parallelize: true
    expect-regex: |
      Hello.
      Hello.

  - name: with multiple files (threads 2)
    command: ai speech transcribe --files ../tests/audio/hello.wav;../tests/audio/hello.wav --threads 2
    parallelize: true
    expect-regex: |
      Hello.
      Hello.

  - name: with multiple files (processes 2)
    command: ai speech transcribe --files ../tests/audio/hello.wav;../tests/audio/hello.wav --processes 2
    parallelize: true
    expect-regex: |
      Hello.
      Hello.

  - name: without diarization
    parallelize: true
    command: ai speech transcribe --file katiesteve_mono.wav --input-path ../tests/audio
    expect-regex: |
      Good morning, Steve\. Good morning, Katie\.

  - name: with diarization
    command: ai speech transcribe --file katiesteve_mono.wav --input-path ../tests/audio --diarization --max-speakers 2
    parallelize: true
    expect-regex: |
      Speaker 1: Good morning, Steve.
      Speaker 2: Good morning, Katie.

  - name: profanity filtering none
    command: ai speech transcribe --file profanity.wav --input-path ../tests/audio --profanity none
    parallelize: true
    expect-regex: |
      mother

  - name: profanity filtering masked
    command: ai speech transcribe --file profanity.wav --input-path ../tests/audio --profanity masked
    parallelize: true
    expect-regex: |
      You [*]+.

  - name: profanity filtering removed
    command: ai speech transcribe --file profanity.wav --input-path ../tests/audio --profanity masked
    parallelize: true
    expect-regex: |
      You .

  - name: profanity filtering tags
    command: ai speech transcribe --file profanity.wav --input-path ../tests/audio --profanity tags
    parallelize: true
    expect-regex: |
      You <profanity>mother.*</profanity>.

  - name: output SRT
    command: ai speech transcribe --file katiesteve_mono.wav --input-path ../tests/audio --output-srt-file -
    parallelize: true
    expect-regex: |
      Good morning, Steve\. Good morning, Katie\.
      \r?$\n
      1\r?$\n
      00:00:\d+,\d+ --> 00:00:\d+,\d+\r?$\n
      Good morning, Steve\.
      \r?$\n
      2\r?$\n
      00:00:\d+,\d+ --> 00:00:\d+,\d+\r?$\n
      Good morning, Katie\.\r?$\n
      \r?$\n
      3\r?$\n
      00:00:\d+,\d+ --> 00:00:\d+,\d+\r?$\n

  - name: output VTT
    command: ai speech transcribe --file katiesteve_mono.wav --input-path ../tests/audio --output-vtt-file -
    parallelize: true
    expect-regex: |
      Good morning, Steve\. Good morning, Katie\.
      WEBVTT\r?$\n
      \r?$\n
      00:00:\d+\.\d+ --> 00:00:\d+\.\d+\r?$\n
      Good morning, Steve\.\r?$\n
      \r?$\n
      00:00:\d+\.\d+ --> 00:00:\d+\.\d+\r?$\n
      Good morning, Katie\.\r?$\n
      \r?$\n
      00:00:\d+\.\d+ --> 00:00:\d+\.\d+\r?$\n
      
  - name: save and run via @
    bash: |
      ai speech transcribe --file ../tests/audio/hello.wav --save hello.alias
      ai speech transcribe @hello.alias
      ai @hello.alias
    parallelize: true
    expect-regex: |
      Saved: .*hello.alias
      Hello.
      Hello.
