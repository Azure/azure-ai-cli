- area: ai init
  tags: 
    before: true
    recordable: true
    _sanitize:
      - headers:
        - name: api-key
          value: 00000000-0000-0000-0000-000000000000
        - name: Set-Cookie
          regex: (_gh_sess=.*?;)  
          value: _gh_ses=GHTOKEN
      - uri:
        - regex: https://(?<host>[^/]+)/
          value: https://fakeendpoint/
      - body:
        - regex: "refresh_token=([^&]+)"
          value: "refresh_token=TOKEN"
        - regex: "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
          value: "email@domain.com"
        - regex: "(\"id_token\":\\s*\")(.*?)(\")"
          value: "\"id_token\": \"ID_TOKEN\""
        - regex: "(\"iKey\":\\s*\")(.*?)(\")"  
          value: "\"iKey\": \"INSTRUMENTATION_KEY\""
        - regex: "(\"(?:key1)\":\\s*\")(.*?)(\")"
          value: "\"key1\": \"COGSVCSKey1\""
        - regex: "(\"(?:key2)\":\\s*\")(.*?)(\")"
          value: "\"key2\": \"COGSVCSKey2\""
        - regex: "(\"time\":\\s*\")(.*?)(\")"
          value: "\"time\": \"TIME\""   
  tests:
  - name: ai init openai deployments
    command: ai init openai deployments
    arguments:
      subscription: e72e5254-f265-4e95-9bd2-9ee8e7329051
      name: robch-oai-eastus2
      chat-deployment-name: gpt-4-32k-0613
      embeddings-deployment-name: text-embedding-ada-002-2
      evaluation-deployment-name: gpt-4-32k-0613
      interactive: false
  - name: ai init speech
    command: ai init speech
    arguments:
      subscription: e72e5254-f265-4e95-9bd2-9ee8e7329051
      name: robch-cranky-red-koala-ais
      interactive: false

- name: test ai chat
  command: ai chat --question "Why is the sky blue, what's it called" --index-name @none
  expect: Rayleigh
  tags: 
    recordable: true
    _sanitize:
      - headers:
        - name: api-key
          value: 00000000-0000-0000-0000-000000000000
      - uri:
        - regex: https://(?<host>[^/]+)/
          value: https://fakeendpoint/

- name: test ai chat built in functions
  command: ai chat --interactive --built-in-functions
  tags:
    recordable: true
    _sanitize:
      - headers:
        - name: api-key
          value: 00000000-0000-0000-0000-000000000000
      - uri:
        - regex: https://(?<host>[^/]+)/
          value: https://fakeendpoint/
      - body:
        - regex: (?:\\\\|\\){1,2}test\.txt
          value: /test.txt
  input: |
    Create a file named "test.txt" with the following content: "Hello, World!"
    What text files are in the current directory?
    Show me what's in the file "test.txt"
  expect: |
    assistant-function: CreateFileAndSaveText
    assistant-function: FindAllFilesMatchingPattern
    test.txt
    Hello, World!

- area: Test AI Chat history
  tags:
    recordable: true
    _sanitize:
      - headers:
        - name: api-key
          value: 00000000-0000-0000-0000-000000000000
      - uri:
        - regex: https://(?<host>[^/]+)/
          value: https://fakeendpoint/
  steps:
    - name: test ai chat history save
      expect: The file is valid.
      bash: |
        #!/bin/bash  
        rm *

        ai chat --question "Why is the sky blue, what's it called" --output-chat-history-file chat-history.jsonl
      
        # Read the jsonl file  
        FILE="chat-history.jsonl"  
        NUM_LINES=$(wc -l < "$FILE")  
        ROLE_SYSTEM_COUNT=$(grep -c "\"role\":\"system\"" "$FILE")  
        ROLE_USER_COUNT=$(grep -c "\"role\":\"user\"" "$FILE")  
        ROLE_ASSISTANT_COUNT=$(grep -c "\"role\":\"assistant\"" "$FILE")  
        
        # Validate if the file is correct jsonl  
        jq -e ".[]" < "$FILE" > /dev/null 2>&1  
        JSONL_VALID=$?  
        
        # Check the conditions  
        if [ $NUM_LINES -eq 3 ] && [ $ROLE_SYSTEM_COUNT -eq 1 ] && [ $ROLE_USER_COUNT -eq 1 ] && [ $ROLE_ASSISTANT_COUNT -eq 1 ] && [ $JSONL_VALID -eq 0 ]; then  
            echo "The file is valid."  
        else  
            echo "The file is not valid."  
            if [ $JSONL_VALID -ne 0 ]; then  
                echo " - The file is not a valid JSONL."  
            fi  
            if [ $NUM_LINES -ne 3 ]; then  
                echo " - There are not exactly 3 rows."  
            fi  
            if [ $ROLE_SYSTEM_COUNT -ne 1 ]; then  
                echo " - There is no row with \"role\":\"system\" in it."  
            fi  
            if [ $ROLE_USER_COUNT -ne 1 ]; then  
                echo " - The row with \"role\":\"user\" is not exactly as above."  
            fi  
            if [ $ROLE_ASSISTANT_COUNT -ne 1 ]; then  
                echo " - There is no row with \"role\":\"assistant\" in it."  
            fi  
        fi  
        rm *
    - name: test ai chat history save with function calls
      expect: The file is valid.
      workingDirectory:
      bash: |
        #!/bin/bash  
        FILE="chat-history-function.jsonl"

        ai chat --question "What is 12345 x 12345?" --built-in-functions true --output-chat-history-file ${FILE}
      
        # Read the JSONL file  
        NUM_LINES=$(wc -l < "$FILE")  
        ROLE_SYSTEM_COUNT=$(grep -c "\"role\":\"system\"" "$FILE")  
        ROLE_USER_COUNT=$(grep -c "\"role\":\"user\"" "$FILE")  
        ROLE_ASSISTANT_COUNT=$(grep -c "\"role\":\"assistant\"" "$FILE")  
        ROLE_FUNCTION_COUNT=$(grep -c "\"role\":\"function\"" "$FILE")  
        FUNCTION_CALL_COUNT=$(grep -c "\"name\":\"MultiplyIntegers\"" "$FILE")  
        
        # Validate if the file is correct JSONL  
        jq -e ".[]" < "$FILE" > /dev/null 2>&1  
        JSONL_VALID=$?  
        
        # Check the conditions  
        if [ $NUM_LINES -eq 5 ] && [ $ROLE_SYSTEM_COUNT -eq 1 ] && [ $ROLE_USER_COUNT -eq 1 ] && [ $ROLE_ASSISTANT_COUNT -eq 2 ] && [ $ROLE_FUNCTION_COUNT -eq 1 ] && [ $FUNCTION_CALL_COUNT -eq 2 ] && [ $JSONL_VALID -eq 0 ]; then  
            echo "The file is valid."  
        else  
            echo "The file is not valid."  
            if [ $JSONL_VALID -ne 0 ]; then  
                echo " - The file is not a valid JSONL."  
            fi  
            if [ $NUM_LINES -ne 5 ]; then  
                echo " - There are not exactly 5 rows. The file has $NUM_LINES rows."  
            fi  
            if [ $ROLE_SYSTEM_COUNT -ne 1 ]; then  
                echo " - There is no row with \"role\":\"system\" in it. The file has $ROLE_SYSTEM_COUNT rows."  
            fi  
            if [ $ROLE_USER_COUNT -ne 1 ]; then  
                echo " - The row with \"role\":\"user\" is not exactly as above. The file has $ROLE_USER_COUNT rows."  
            fi  
            if [ $ROLE_ASSISTANT_COUNT -ne 2 ]; then  
                echo " - There are not exactly 2 rows with \"role\":\"assistant\" in them. The file has $ROLE_ASSISTANT_COUNT rows."  
            fi  
            if [ $ROLE_FUNCTION_COUNT -ne 1 ]; then  
                echo " - There is no row with \"role\":\"function\" in it. The file has $ROLE_FUNCTION_COUNT rows."  
            fi  
            if [ $FUNCTION_CALL_COUNT -ne 2 ]; then  
                echo " - The function \"MultiplyIntegers\" is not called. The file has $FUNCTION_CALL_COUNT rows."  
            fi  
        fi  
        rm *
    - name: Test AI Chat with restored history file (basic)
      expect: sky
      bash: |
        ai chat --question "What would make it red?" --built-in-functions true --input-chat-history-file ../tests/chat-history-basic.jsonl
    - name: Test AI Chat with restored history file (function calls)
      expect: FindAllFilesInCurrentDirectory
      bash: |
        ai chat --question "What was the last function call you made using your allowed functions?" --input-chat-history-file ../tests/chat-history-function.jsonl

- area: Test AI Chat using Prompty
  tags:
    recordable: true
    _sanitize:
      - headers:
        - name: api-key
          value: 00000000-0000-0000-0000-000000000000
      - uri:
        - regex: https://(?<host>[^/]+)/
          value: https://fakeendpoint/
  steps:
    - name: Test AI Chat with input parameter file (prompty)
      expect: Jane Doe
      bash: |
        ai chat --input-parameter-file ../tests/basic-no-inputs.prompty
    - name: Test AI Chat with input parameter file and nested input file (prompty)
      expect: Jane Doe
      bash: |
        ai chat --input-parameter-file ../tests/basic.prompty
