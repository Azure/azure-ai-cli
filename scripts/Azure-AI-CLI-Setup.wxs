<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:bal="http://schemas.microsoft.com/wix/BalExtension"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

    <Bundle Name="Azure AI CLI"
            Version="$(var.productVersion)"
            Manufacturer="Microsoft Corporation"
            UpgradeCode="BF9A65EF-7D5A-4DC4-90E4-CDC44F042E96">

        <BootstrapperApplicationRef Id="WixStandardBootstrapperApplication.RtfLicense">
            <bal:WixStandardBootstrapperApplication
                LicenseFile="CLI_License.rtf"
                LocalizationFile="Azure-AI-CLI-Setup.wxl"
                LogoFile="WindowsInstaller.png"
                SuppressOptionsUI="yes"
                ThemeFile="Azure-AI-CLI-Setup.xml"/>
        </BootstrapperApplicationRef>

        <!--
        Check the version of existing Azure AI CLI .msi installation. This is a workaround for
        https://github.com/wixtoolset/issues/issues/3746 (note: WixBundleAction 5 = Uninstall).
        -->
        <util:ProductSearch Variable="AlreadyInstalledVersion"
                            UpgradeCode="F1CDBA9C-E353-4039-9A20-059A1E587E73"
                            Id="AlreadyInstalledVersionSearch"
                            Result="version"/>

        <bal:Condition Message="The same or newer version of this product is already installed.">
        NOT WixBundleAction = 5 OR NOT AlreadyInstalledVersion &gt;= v$(var.productVersion)
        </bal:Condition>

        <Chain>
            <!-- Dependencies -->
            <PackageGroupRef Id="VcRuntime"/>
            <PackageGroupRef Id="DotNetSdk"/>
            <PackageGroupRef Id="AzureCLI"/>
            <!-- AI CLI package -->
            <MsiPackage SourceFile="Azure-AI-CLI.msi" Vital="yes"/>
        </Chain>
    </Bundle>

    <Fragment>
        <!-- .NET SDK -->
        <!--
        There can be multiple SDK versions installed side by side on the system
        and .NET provides no way of checking the highest or major version other
        than by running the dotnet command and parsing the output, which is not
        supported here. Thus need to check for each possible 8.x SDK folder and
        if none is found then install the configured (highest) 8.x version.
        -->
        <util:DirectorySearch Id="DotNet80201" Path="[ProgramFiles64Folder]dotnet\sdk\8.0.201" Result="exists" Variable="NET_80201"/>
        <util:DirectorySearch Id="DotNet80200" Path="[ProgramFiles64Folder]dotnet\sdk\8.0.200" Result="exists" Variable="NET_80200"/>
        <util:DirectorySearch Id="DotNet80102" Path="[ProgramFiles64Folder]dotnet\sdk\8.0.102" Result="exists" Variable="NET_80102"/>
        <util:DirectorySearch Id="DotNet80101" Path="[ProgramFiles64Folder]dotnet\sdk\8.0.101" Result="exists" Variable="NET_80101"/>
        <util:DirectorySearch Id="DotNet80100" Path="[ProgramFiles64Folder]dotnet\sdk\8.0.100" Result="exists" Variable="NET_80100"/>

        <PackageGroup Id="DotNetSdk">
            <ExePackage Compressed="no"
                        DetectCondition="NET_80201 OR NET_80200 OR NET_80102 OR NET_80101 OR NET_80100"
                        DownloadUrl="$(var.dotNetUrl)"
                        InstallCommand="/quiet /norestart"
                        PerMachine="yes"
                        Permanent="yes"
                        SourceFile="dotnet-sdk-$(var.dotNetVersion)-win-$(var.targetPlatform).exe"
                        Vital="yes"/>
        </PackageGroup>

        <!-- Azure CLI -->
        <util:DirectorySearch Id="AzureCLIDirectory"
                              Path="[ProgramFiles64Folder]Microsoft SDKs\Azure\CLI2"
                              Result="exists"
                              Variable="AZURE_CLI_INSTALLED"/>

        <PackageGroup Id="AzureCLI">
            <MsiPackage Compressed="no"
                        DisplayInternalUI="no"
                        DownloadUrl="$(var.azureCliUrl)"
                        ForcePerMachine="yes"
                        InstallCondition="NOT AZURE_CLI_INSTALLED"
                        Permanent="yes"
                        SourceFile="azure-cli-$(var.azureCliVersion)-$(var.targetPlatform).msi"
                        Visible="yes"
                        Vital="yes"/>
        </PackageGroup>

        <!-- Visual C++ runtime -->
        <util:RegistrySearch Id="VcRuntimeRegistry"
                             Key="SOFTWARE\Wow6432Node\Microsoft\VisualStudio\14.0\VC\Runtimes\$(var.targetPlatform)"
                             Result="exists"
                             Root="HKLM"
                             Variable="VCRT_INSTALLED"
                             Win64="yes"/>

        <PackageGroup Id="VcRuntime">
            <ExePackage Compressed="no"
                        DetectCondition="VCRT_INSTALLED"
                        DownloadUrl="$(var.vcrtUrl)"
                        InstallCommand="/quiet /norestart"
                        PerMachine="yes"
                        Permanent="yes"
                        SourceFile="VC_redist.$(var.targetPlatform).exe"
                        Vital="yes"/>
        </PackageGroup>
    </Fragment>
</Wix>
